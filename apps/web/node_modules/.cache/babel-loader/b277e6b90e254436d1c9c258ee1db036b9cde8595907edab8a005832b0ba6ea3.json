{"ast":null,"code":"// GluWise API Service for React Frontend\nimport axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api/v1';\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nclass ApiService {\n  // Health check\n  async getHealth() {\n    try {\n      const response = await apiClient.get('/health');\n      return response.data.data;\n    } catch (error) {\n      console.error('Health check failed:', error);\n      throw error;\n    }\n  }\n\n  // Scan barcode\n  async scanBarcode(barcode) {\n    try {\n      const response = await apiClient.post('/scan-barcode', {\n        barcode\n      });\n      return response.data.data;\n    } catch (error) {\n      console.error('Barcode scan failed:', error);\n      throw error;\n    }\n  }\n\n  // Scan image\n  async scanImage(imageFile) {\n    try {\n      const formData = new FormData();\n      formData.append('image', imageFile);\n      const response = await apiClient.post('/scan-image', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data.data;\n    } catch (error) {\n      console.error('Image scan failed:', error);\n      throw error;\n    }\n  }\n\n  // Analyze text\n  async analyzeText(query) {\n    try {\n      const response = await apiClient.post('/analyze-text', {\n        query\n      });\n      return response.data.data;\n    } catch (error) {\n      console.error('Text analysis failed:', error);\n      throw error;\n    }\n  }\n\n  // Get scan result by ID\n  async getScanResult(scanId) {\n    try {\n      const response = await apiClient.get(`/scan/${scanId}`);\n      return response.data.data;\n    } catch (error) {\n      console.error('Get scan result failed:', error);\n      throw error;\n    }\n  }\n}\nexport const apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","ApiService","getHealth","response","get","data","error","console","scanBarcode","barcode","post","scanImage","imageFile","formData","FormData","append","analyzeText","query","getScanResult","scanId","apiService"],"sources":["/Users/mairamelis/Desktop/gluwise/apps/web/src/services/api.ts"],"sourcesContent":["// GluWise API Service for React Frontend\nimport axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api/v1';\n\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport interface Product {\n  id: string;\n  name: string;\n  brand: string;\n  barcode?: string;\n  category: string;\n  description: string;\n}\n\nexport interface NutritionInfo {\n  calories: number;\n  protein: number;\n  carbs: number;\n  fat: number;\n  fiber: number;\n  sugar: number;\n  sodium: number;\n  serving_size: string;\n}\n\nexport interface AIAnalysis {\n  health_score: number;\n  insights: string;\n  recommendations: string[];\n  warnings: string[];\n  benefits: string[];\n}\n\nexport interface ScanMetadata {\n  scan_type: 'barcode' | 'image' | 'manual';\n  confidence: number;\n  processing_time_ms: number;\n  timestamp: string;\n}\n\nexport interface ScanResult {\n  id: string;\n  product: Product;\n  nutrition: NutritionInfo;\n  analysis: AIAnalysis;\n  scan_metadata: ScanMetadata;\n}\n\nexport interface HealthStatus {\n  status: string;\n  timestamp: string;\n  uptime: number;\n  version: string;\n  services: {\n    database: string;\n    openai: string;\n    vision: string;\n    usda: string;\n  };\n  memory: {\n    used: number;\n    total: number;\n    percentage: number;\n  };\n}\n\nclass ApiService {\n  // Health check\n  async getHealth(): Promise<HealthStatus> {\n    try {\n      const response = await apiClient.get('/health');\n      return response.data.data;\n    } catch (error) {\n      console.error('Health check failed:', error);\n      throw error;\n    }\n  }\n\n  // Scan barcode\n  async scanBarcode(barcode: string): Promise<ScanResult> {\n    try {\n      const response = await apiClient.post('/scan-barcode', { barcode });\n      return response.data.data;\n    } catch (error) {\n      console.error('Barcode scan failed:', error);\n      throw error;\n    }\n  }\n\n  // Scan image\n  async scanImage(imageFile: File): Promise<ScanResult> {\n    try {\n      const formData = new FormData();\n      formData.append('image', imageFile);\n      \n      const response = await apiClient.post('/scan-image', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n      return response.data.data;\n    } catch (error) {\n      console.error('Image scan failed:', error);\n      throw error;\n    }\n  }\n\n  // Analyze text\n  async analyzeText(query: string): Promise<ScanResult> {\n    try {\n      const response = await apiClient.post('/analyze-text', { query });\n      return response.data.data;\n    } catch (error) {\n      console.error('Text analysis failed:', error);\n      throw error;\n    }\n  }\n\n  // Get scan result by ID\n  async getScanResult(scanId: string): Promise<ScanResult> {\n    try {\n      const response = await apiClient.get(`/scan/${scanId}`);\n      return response.data.data;\n    } catch (error) {\n      console.error('Get scan result failed:', error);\n      throw error;\n    }\n  }\n}\n\nexport const apiService = new ApiService();\nexport default apiService;\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,8BAA8B;AAEpF,MAAMC,SAAS,GAAGL,KAAK,CAACM,MAAM,CAAC;EAC7BC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AA+DF,MAAMC,UAAU,CAAC;EACf;EACA,MAAMC,SAASA,CAAA,EAA0B;IACvC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMN,SAAS,CAACO,GAAG,CAAC,SAAS,CAAC;MAC/C,OAAOD,QAAQ,CAACE,IAAI,CAACA,IAAI;IAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAME,WAAWA,CAACC,OAAe,EAAuB;IACtD,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAMN,SAAS,CAACa,IAAI,CAAC,eAAe,EAAE;QAAED;MAAQ,CAAC,CAAC;MACnE,OAAON,QAAQ,CAACE,IAAI,CAACA,IAAI;IAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMK,SAASA,CAACC,SAAe,EAAuB;IACpD,IAAI;MACF,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,SAAS,CAAC;MAEnC,MAAMT,QAAQ,GAAG,MAAMN,SAAS,CAACa,IAAI,CAAC,aAAa,EAAEG,QAAQ,EAAE;QAC7Db,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACF,OAAOG,QAAQ,CAACE,IAAI,CAACA,IAAI;IAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMU,WAAWA,CAACC,KAAa,EAAuB;IACpD,IAAI;MACF,MAAMd,QAAQ,GAAG,MAAMN,SAAS,CAACa,IAAI,CAAC,eAAe,EAAE;QAAEO;MAAM,CAAC,CAAC;MACjE,OAAOd,QAAQ,CAACE,IAAI,CAACA,IAAI;IAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMY,aAAaA,CAACC,MAAc,EAAuB;IACvD,IAAI;MACF,MAAMhB,QAAQ,GAAG,MAAMN,SAAS,CAACO,GAAG,CAAC,SAASe,MAAM,EAAE,CAAC;MACvD,OAAOhB,QAAQ,CAACE,IAAI,CAACA,IAAI;IAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACb;EACF;AACF;AAEA,OAAO,MAAMc,UAAU,GAAG,IAAInB,UAAU,CAAC,CAAC;AAC1C,eAAemB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}